name: $(Date:yyyy.MM.dd)-ado-ondemand-agents-$(Build.BuildId)
trigger: none

# pool: new-IDA-agentpool
pool: Azure pipelines

variables:
- group: agent_details

stages:
- stage: Build
  displayName: Build Agent Images
  jobs:  
  - job: Build
    displayName: Build
     
    steps:
       - task: CmdLine@2
         displayName: 'Build and Push Image'
         inputs:
            script: |
              cd agents/ondemand-agents
              docker build -t agents:$(VER) .
              docker login $(acrRegistry) --username $(acrusername) --password $(azureACRToken)
              docker tag agents:$(VER) $(acrRegistry)/ondemand-agents:$(VER)
              docker push $(acrRegistry)/ondemand-agents:$(VER)
              docker rmi $(acrRegistry)/ondemand-agents:$(VER)











# name: $(Date:yyyy.MM.dd)-ado-init-agents-$(Build.BuildId)
# trigger: none

# pool: new-IDA-agentpool

# variables:
# - group: agent_details

# stages:
# - stage: Build
#   displayName: Build Agent Images
#   jobs:  
#   - job: Build
#     displayName: Build
     
#     steps:
#        - task: CmdLine@2
#          displayName: 'Build and Push Image'
#          inputs:
#             script: |
#               cd agents/ondemand-agents
#               docker login acrforida.azurecr.io --username AcrForIda --password K=8ymBBAJ+=NwmOGJzXVru2Usn7jlmBb
#               docker pull ubuntu:20.04
#               docker build -t agents:$(VER) .
#               docker login $(acrRegistry) --username $(acrusername) --password $(azureACRToken)
#               docker tag agents:$(VER) $(acrRegistry)/ondemand-agents:$(VER)
#               docker push $(acrRegistry)/ondemand-agents:$(VER)
#               docker rmi $(acrRegistry)/ondemand-agents:$(VER)
      #  - task: Kubernetes@1
      #    inputs:
      #     connectionType: 'Kubernetes Service Connection'
      #     kubernetesServiceEndpoint: 'Achinta-aks'
      #     namespace: 'ado-agents'
      #     command: 'login'
        
      #  - task: CmdLine@2
      #    displayName: 'Replace Tokens'
      #    inputs:
      #       script: |
      #           sed -i 's,AZP_POOL_NAME,ondemand-agent,g' agents/deployments/ondemand-agents/ondemand-agents.yaml
      #           sed -i 's,AZP_URL_VALUE,$(OrganizationURL),g' agents/deployments/ondemand-agents/ondemand-agents.yaml
      #           sed -i 's,AZP_TOKEN_SECRET,$(Pat),g' agents/deployments/ondemand-agents/ondemand-agents.yaml
      #           sed -i 's,ACR_NAME,$(acrRegistry),g' agents/deployments/ondemand-agents/ondemand-agents.yaml
      #           sed -i 's,REPOSITORY_NAME,ondemand-agents,g' agents/deployments/ondemand-agents/ondemand-agents.yaml
      #           sed -i 's,VER,$(VER),g' agents/deployments/ondemand-agents/ondemand-agents.yaml
                
      #           cat agents/deployments/ondemand-agents/ondemand-agents.yaml
                   
      #  - task: CmdLine@2
      #    displayName: 'Deploy'
      #    inputs:
      #      script: |
      #          kubectl apply -f agents/deployments/ondemand-agents/ondemand-agents.yaml -n ado-agents 